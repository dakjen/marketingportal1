import React, { useState, useContext } from 'react';
import { AuthContext } from './AuthContext';
import { ProjectContext } from './ProjectContext';
import './AdminReportGenerator.css';

function AdminReportGenerator({ fetchWordReports, wordReports }) {
  const { currentUser } = useContext(AuthContext);
  const { activeProject } = useContext(ProjectContext);

  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');
  const [reportOutput, setReportOutput] = useState('');
  const [reportName, setReportName] = useState('');
  const [summary, setSummary] = useState('');

  const handleGenerateReport = async () => {
    if (!activeProject) {
      alert('Please select a project first.');
      return;
    }

    const prompt = `please ustilize the entries from social media and physical marketing to generate a report of: money spent, organizations worked with, total in each category, and total in each subcategory, as well as a short narrative at gthe very top describing all of the types of marketing hit and an approximate reach for each entry, as well as total reach per category. please utilize time frame for the physical marketing entry cateogires as well as details given to estimate reach. the structure of this report should be title, summary, then a "short summary" section where you summarize the total reach, and total items added within the time frame, do not include costs, just the extimated total reach, then put the rest of the items named above: format it simply with bullets and narratives, like a plain word doc, no formatting indicators. Here is a summary of what has happened in within the dates: ${summary}. After the data, please provide 1-2 paragraphs of analysis on the performance compared to industry standards and to other affordable housing projects.`;

    try {
      const response = await fetch('/api/generate-and-save-word-report', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-User-Username': currentUser.username,
          'X-User-Role': currentUser.role,
        },
        body: JSON.stringify({ reportType: 'admin', startDate, endDate, prompt, project_name: activeProject.name, reportName: reportName || 'Generated Report', summary }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Failed to generate report');
      }

      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${reportName || 'Generated Report'}.docx`;
      document.body.appendChild(a);
      a.click();
      a.remove();

      fetchWordReports();
    } catch (error) {
      console.error('Error generating AI report:', error);
      alert(error.message || 'Failed to generate report. Please try again.');
    }
  };

  return (
    <div className="admin-report-generator-page-container">
      <div className="report-generator-section">
        <h2>Admin Report Generator</h2>
        <div className="report-section">
          <h3>Admin Report</h3>
          <div className="report-controls">
            <label>Start Date:
              <input type="date" value={startDate} onChange={(e) => setStartDate(e.target.value)} />
            </label>
            <label>End Date:
              <input type="date" value={endDate} onChange={(e) => setEndDate(e.target.value)} />
            </label>
            <label>Report Name:
              <input type="text" value={reportName} onChange={(e) => setReportName(e.target.value)} />
            </label>
            <label>Summary:
              <textarea value={summary} onChange={(e) => setSummary(e.target.value)} />
            </label>
            <button onClick={handleGenerateReport}>Generate and Download Report</button>
          </div>
        </div>
        <div className="saved-reports-section">
          <h3>Saved Reports</h3>
          {wordReports.length > 0 ? (
            <table>
              <thead>
                <tr>
                  <th>Report Name</th>
                  <th>Generated By</th>
                  <th>Date</th>
                </tr>
              </thead>
              <tbody>
                {wordReports.filter(report => report.report_type === 'admin').map((report) => (
                  <tr key={report.id}>
                    <td><a href={`/api/word-reports/${report.id}/view`} target="_blank" rel="noopener noreferrer">{report.report_name}</a></td>
                    <td>{report.uploader_username}</td>
                    <td>{new Date(report.generation_date).toLocaleDateString()}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          ) : (
            <p>No reports saved yet.</p>
          )}
        </div>
      </div>
    </div>
  );
}

export default AdminReportGenerator;